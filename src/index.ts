import { App, ExpressReceiver } from '@slack/bolt';
import { ExtendedErrorHandlerArgs } from '@slack/bolt/dist/App';

import * as dotenv from 'dotenv';
dotenv.config({ path: `.env` });

// eslint-disable-next-line @typescript-eslint/no-var-requires
const language = require('@google-cloud/language');

const singingSecret = process.env.SLACK_SIGNING_SECRET as string;
const slackToken = process.env.SLACK_BOT_TOKEN as string;

// App„ÅÆÂàùÊúüÂåñ
const receiver = new ExpressReceiver({
  signingSecret: process.env.SLACK_SIGNING_SECRET as string,
});

const config = {
  receiver,
  signingSecret: singingSecret,
  token: slackToken,
};

const app = new App(config);

app.error(async ({ error, logger }: ExtendedErrorHandlerArgs) => {
  logger.error(error);
});

// „ÉÜ„Çπ„Éà : command /ping „Çí„Éà„É™„Ç¨„Éº„ÅßÁô∫Áîü„Åô„Çã„Ç§„Éô„É≥„Éà„ÇíÂÆöÁæ©
app.command('/ping', async ({ command, ack, say, respond }) => {
  console.log(command);
  console.log(respond);
  await ack();
  await say(`pong`);
});

// „ÉÜ„Çπ„Éà : message ÁâπÂÆö„ÅÆÊñáÂ≠óÂàó üëã „ÇíÂê´„ÇÄ„É°„ÉÉ„Çª„Éº„Ç∏„Çí„Éà„É™„Ç¨„Éº„Å®„Åó„Å¶Áô∫Áîü„Åô„Çã„Ç§„Éô„É≥„Éà„ÇíÂÆöÁæ©
// eslint-disable-next-line @typescript-eslint/no-explicit-any
app.message(':wave:', async ({ message, say }: any) => {
  await say(`Hello, <@${message.user}>`);
});

// eslint-disable-next-line @typescript-eslint/no-explicit-any
app.event('message', async ({ event, say, logger }: any) => {
  try {
    const client = new language.LanguageServiceClient();

    const document = {
      content: event.text,
      type: 'PLAIN_TEXT',
    };

    const [result] = await client.analyzeSentiment({ document: document });

    // ÊñáÁ´†ÂÖ®‰Ωì„Çí„Å®„Åä„Åó„Å¶„ÅÆÊÑüÊÉÖ„ÇíÁ§∫„ÅôÊï∞ÂÄ§„ÇíÂèñÂæó„Åô„Çã
    const entireDocument = result.documentSentiment;
    const entireDocumentPositive = entireDocument.score;

    // ÊñáÁ´†„Åî„Å®„ÅÆÊÑüÊÉÖ„ÇíÁ§∫„ÅôÊï∞ÂÄ§Âèä„Å≥ÊñáÁ´†„ÅÆÂÜÖÂÆπ„ÇíÂèñÂæó„Åô„Çã
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    result.sentences.map((sentence: any) => {
      console.log(sentence.text.content);
      console.log(sentence.sentiment);
    });

    if (entireDocumentPositive < -0.25) {
      await say('„Éç„Ç¨„ÉÜ„Ç£„ÉñÁô∫Ë®Ä„ÅØ„ÇÑ„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑÔºÅ');
    }

    if (entireDocumentPositive > -0.25 && entireDocumentPositive < 0.25) {
      await say('ÊôÆÈÄö„ÅÆÊÑüÊÉÖ„Åß„Åô„Å≠');
    }

    if (entireDocumentPositive > 0.25) {
      await say('Âπ∏„Åõ„Åù„ÅÜ„Åß‰Ωï„Çà„Çä');
    }
  } catch (error) {
    logger.error(error);
  }
});

(async () => {
  const port = process.env.PORT || 3000;
  await app.start(port);

  console.log('‚ö°Ô∏è Bolt app is running!');
})();
